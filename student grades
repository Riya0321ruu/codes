class StudentGradeChecker:
    def __init__(self):  # Corrected the method name from _init_ to __init__
        # Dictionary to store student grades
        self.grades = {}

    def add_student(self, name, grade):
        """Add a student and their grade."""
        if name in self.grades:
            print(f"{name} already exists. Updating the grade.")
        self.grades[name] = grade
        print(f"Added/Updated {name} with grade: {grade}")

    def merge_sort(self, items):
        """Sort the items using merge sort."""
        if len(items) > 1:
            mid = len(items) // 2
            left_half = items[:mid]
            right_half = items[mid:]

            # Recursive call on each half
            self.merge_sort(left_half)
            self.merge_sort(right_half)

            i = j = k = 0

            # Merging the sorted halves
            while i < len(left_half) and j < len(right_half):
                if left_half[i][1] > right_half[j][1]:  # Sort in descending order
                    items[k] = left_half[i]
                    i += 1
                else:
                    items[k] = right_half[j]
                    j += 1
                k += 1

            while i < len(left_half):
                items[k] = left_half[i]
                i += 1
                k += 1

            while j < len(right_half):
                items[k] = right_half[j]
                j += 1
                k += 1

    def binary_search(self, sorted_items, name):
        """Perform binary search to find a student's grade."""
        low = 0
        high = len(sorted_items) - 1
        
        while low <= high:
            mid = (low + high) // 2
            if sorted_items[mid] == name:
                return self.grades[name]  # Return the grade from the dictionary
            elif sorted_items[mid] < name:
                low = mid + 1
            else:
                high = mid - 1
        
        return None  # Not found

    def display_sorted_grades(self):
        """Display all students' grades sorted in descending order."""
        items = list(self.grades.items())
        self.merge_sort(items)
        if not items:
            return "No students found."
        return "\n".join(f"{name}: {grade}" for name, grade in items)

# Example usage
if __name__ == "__main__":  # Corrected _name_ to __name__ and _main_ to __main__
    checker = StudentGradeChecker()

    while True:
        print("\nStudent Grade Checker Menu:")
        print("1. Add Student")
        print("2. Display All Grades")
        print("3. Search for Student Grade")
        print("4. Exit")
        
        choice = input("Choose an operation (1-4): ")

        if choice == '1':
            name = input("Enter student name: ")
            try:
                grade = float(input(f"Enter grade for {name}: "))
                checker.add_student(name, grade)
            except ValueError:
                print("Invalid input for grade. Please enter a numeric value.")
        
        elif choice == '2':
            print("\nAll Students' Grades Sorted in Descending Order:")
            print(checker.display_sorted_grades())
        
        elif choice == '3':
            sorted_students = list(checker.grades.keys())
            sorted_students.sort()  # Sort student names for binary search
            student_to_search = input("Enter a student name to search for their grade: ")
            grade = checker.binary_search(sorted_students, student_to_search)

            if grade is not None:
                print(f"{student_to_search}'s grade is {grade}.")
            else:
                print(f"{student_to_search} not found.")
        
        elif choice == '4':
            print("Exiting the program.")
            break
        
        else:
            print("Invalid choice. Please select a valid operation (1-4).")
